usethis::use_course("https://github.com/estebanpdl/RBasics-DFRLab-DSProgram.git")
:use_course("https://github.com/estebanpdl/RBasics-DFRLab-DSProgram.git")
use_course("https://github.com/estebanpdl/RBasics-DFRLab-DSProgram.git")
install.packages("GGally")
install.packages("corrplot")
require("GGally")
require("corrplot")
install.packages("IRkernel")
IRkernel::installspec(user = FALSE)
q()
setwd(/Users/hazelgandhi/Desktop/tennis-regression)
setwd(~/Users/hazelgandhi/Desktop/tennis-regression)
setwd("/Users/hazelgandhi/Desktop/tennis-regression")
library(readr)
tennis_data <- read_csv("tennis_data.csv")
linear_model <- lm(matches_won ~ Matches + Wins + Set W-L, data = tennis_data)
summary(linear_model)
linear_model <- lm(matches_won ~ Matches + Wins + `Set W-L`, data = tennis_data)
linear_model <- lm(Wins ~ Matches + Set W-L + Game W-L + Tiebreak W-L, data = tennis_data)
linear_model <- lm(Wins ~ Matches + Set Wins + Game Wins + Tiebreak Wins, data = tennis_data)
linear_model <- lm(Wins ~ Matches + SetW + GameW + TiebreakW, data = tennis_data)
linear_model <- lm(Wins ~ Matches + SetW + GameW + TiebreakW, data = tennis_data)
tennis_data <- read_csv("tennis_data.csv")
linear_model <- lm(Wins ~ Matches + SetW + GameW + TiebreakW, data = tennis_data)
linear_model(summary)
summary(linear_model)
tennis_long <- pivot_longer(tennis_data,
cols = -Player,  # Keep 'Player' column fixed
names_to = "Statistic",
values_to = "Value")
library(tidyr)
tennis_long <- pivot_longer(tennis_data,
+                             cols = -Player,  # Keep 'Player' column fixed
tennis_long <- pivot_longer(tennis_data,
cols = -Player,  # Keep 'Player' column fixed
names_to = "Statistic",
values_to = "Value")
head(tennis_long)
tennis_data <- read.csv("tennis_men.csv")
tennis_long <- pivot_longer(tennis_data,)
tennis_long <- pivot_longer(tennis_data,
cols= -Player,
names_to = "Statistic",
values_to = "Value")
library(dplyr)
tennis_data <- tennis_data %>%
mutate(across(where(is.character), ~ as.integer(as.numeric(.))))
head(tennis_data)
tennis_data <- read.csv("tennis_men.csv")
tennis_long <- pivot_longer(tennis_data,
cols= -Player,
names_to = "Statistic",
values_to = "Value")
head(tennis_long)
library(tidyr)
library(dplyr)
# 1. Read the data
tennis_data <- read.csv("tennis_men.csv")
# 2. First, convert to long format ONLY the numeric columns
# Exclude the string columns that are causing the error
numeric_cols <- c("matches", "wins", "loss", "win_pct",
"set_win", "set_loss", "set_won_pct",
"game_win", "game_loss", "game_won_pct",
"tiebreak_win", "tiebreak_loss", "tiebreak_pct",
"MS", "hold_pct", "break_pct", "ace_pct", "df_pct",
"first_serve_pct", "first_serve_win_pct", "second_serve_win_pct",
"serve_points_won", "return_points_won", "total_points_won")
# Keep Player column and pivot only numeric columns
tennis_long <- tennis_data %>%
select(Player, all_of(numeric_cols)) %>%
pivot_longer(cols = -Player,
names_to = "statistic",
values_to = "value")
# If you really need the string columns too, you could process them separately
# and then join them back
head(tennis_long)
linear_model <- lm(wins ~ win_pct + set_win + set_loss + game_win + game_loss +
tiebreak_win + tiebreak_loss, data = tennis_data)
summary(linear_model)
linear_model <- lm(wins ~ set_win + set_loss + game_win + game_loss +
+                        tiebreak_win + tiebreak_loss, data = tennis_data)
summary(linear_model)
# For a match between player A and player B
playerA_stats <- subset(tennis_data, Player == "Novak Djokovic")
playerB_stats <- subset(tennis_data, Player == "Jannik Sinner")
# Create comparative features
match_features <- data.frame(
serve_adv = playerA_stats$serve_points_won - playerB_stats$return_points_won,
return_adv = playerA_stats$return_points_won - playerB_stats$serve_points_won,
# Other head-to-head comparative metrics
)
# For a match between player A and player B
playerA_stats <- subset(tennis_data, Player == "Novak Djokovic")
playerB_stats <- subset(tennis_data, Player == "Jannik Sinner")
# Create comparative features
match_features <- data.frame(
serve_adv = playerA_stats$serve_points_won - playerB_stats$return_points_won,
return_adv = playerA_stats$return_points_won - playerB_stats$serve_points_won,
# Other head-to-head comparative metrics
)
# First check if both players exist in your dataset
if("Novak Djokovic" %in% tennis_data$Player) {
print("Djokovic found")
} else {
print("Djokovic not found")
}
if("Jannik Sinner" %in% tennis_data$Player) {
print("Sinner found")
} else {
print("Sinner not found")
}
# Check the column names to make sure 'serve_points_won' exists
print(names(tennis_data))
# Get the entire row for each player to verify data
djokovic_row <- tennis_data[tennis_data$Player == "Novak Djokovic", ]
sinner_row <- tennis_data[tennis_data$Player == "Jannik Sinner", ]
print(djokovic_row)
print(sinner_row)
# Now try a safer approach with explicit error checking
if(!is.null(djokovic_row) && nrow(djokovic_row) > 0 &&
!is.null(sinner_row) && nrow(sinner_row) > 0) {
# Check if the columns exist
if("serve_points_won" %in% names(tennis_data) &&
"return_points_won" %in% names(tennis_data)) {
# Check for NA values
d_serve <- djokovic_row$serve_points_won
s_return <- sinner_row$return_points_won
d_return <- djokovic_row$return_points_won
s_serve <- sinner_row$serve_points_won
if(!is.na(d_serve) && !is.na(s_return) && !is.na(d_return) && !is.na(s_serve)) {
match_features <- data.frame(
serve_adv = d_serve - s_return,
return_adv = d_return - s_serve
)
print(match_features)
} else {
print("Missing values in player statistics")
}
} else {
print("Required columns not found")
}
} else {
print("Player data not found")
}
tennis_data <- read.csv("tennis_stats_final.csv")
tennis_data_long <- tennis_data %>%
pivot_longer(
cols = -Player,  # All columns except Player
names_to = "statistic",  # New column for the statistic names
values_to = "value"      # New column for the values
)
head(tennis_data_long)
linear_model <- lm(total_matches_won_2024 ~ matches_win_2023 + matches_loss + serve_points_won_pct + ace_pct + df_pct + set_win, data = tennis_data_long)
colnames(tennis_data_long)
head(tennis_data)
linear_model <- lm(total_matches_won_2024 ~ matches_win_2023 + matches_loss + serve_points_won_pct + ace_pct + df_pct + set_win, data = tennis_data)
summary(linear_model)
linear_model <- lm(total_matches_won_2024 ~ set_win, data = tennis_data)
summary(linear_model)
colnames(tennis_data)
linear_model <- lm(total_matches_won_2024 ~ matches_win_2023 + matches_loss + serve_points_won_pct + set_win, data = tennis_data)
summary(linear_model)
install.packages("DescTools")
setwd("/Users/hazelgandhi/Desktop/tennis-regression")
tennis_data <- read.csv("top_20_player_stats_final.csv")
head(tennis_data)
logistic <- glm(result ~ rate_1stWon + bpSaved_rate + return_rate + player + surface, data=tennis_df, family="binomial")
logistic <- glm(result ~ rate_1stWon + bpSaved_rate + return_rate + player + surface, data=tennis_data, family="binomial")
logistic <- glm(result ~ rate_1stWon + bpSaved_rate + return_rate, data=tennis_data, family="binomial")
linear_model <- lm(result ~ rate_1stWon + bpSaved_rate + return_rate, data=tennis_data)
summary(linear_model)
logistic <- glm(result ~ rate_1stWon, data=tennis_data, family="binomial")
logistic <- glm(result ~ bpSaved_rate, data=tennis_data, family="binomial")
summary(logistic)
PseudoR2(logistic, which="McFadden")
install.packages("DescTools")
library(DescTools)
install.packages("DescTools", repos = "https://CRAN.R-project.org", dependencies = TRUE)
library(DescTools)
brew uninstall gcc
library(DescTools)
tennis_data <- read.csv("with_rpw_and_spw.csv")
head(tennis_data)
tennis_data <- read.csv("with_rpw_and_spw.csv")
logistic <- glm(Result ~ first_srv_won_pct + second_srv_won_pct, data=tennis_data, family="binomial")
summary(logistic)
logistic <- glm(Result ~ first_srv_won_pct + second_srv_won_pct + Surface + vRank, data=tennis_data, family="binomial")
summary(logistic)
tennis_data <- read.csv("top_20_player_stats_final.csv")
head(tennis_data)
plot(data$rate_1stWon, data$result)
library(ggplot2)
plot(data$rate_1stWon, data$result)
plot(tennis_data$rate_1stWon, tennis_data$result)
plot(tennis_data$bpSaved_rate, tennis_data$result)
logistic <- glm(result ~ rate_1stWon + bpSaved_rate + return_rate, data=tennis_data, family="binomial")
model <- glm(result ~ rate_1stWon + bpSaved_rate, family = binomial(link = "logit"), data = tennis_data)
class(tennis_data)
install.packages("logistf")
library(logistf)
